{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNEyOR7/jUk2rNn8LQMcTDP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"QMxJkQKd0snO"}},{"cell_type":"code","source":["import random\n","import numpy as np\n","from collections import Counter\n","from pprint import pprint\n","\n","CARD_VALUES = {\n","    40: {'О': 25, 'Н': 10, 'Р': 8, 'Л': 1},\n","    60: {'О': 38, 'Н': 15, 'Р': 6, 'Л': 1},\n","    80: {'О': 50, 'Н': 20, 'Р': 7, 'Л': 3}\n","}\n","\n","def normalize_probabilities(*probs):\n","    \"\"\"\n","    Нормализует список вероятностей, чтобы их сумма была равна 1.\n","\n","    Args:\n","        *probs (float): Список вероятностей для нормализации.\n","\n","    Returns:\n","        list: Нормализованный список вероятностей.\n","\n","    Raises:\n","        ValueError: Если сумма всех вероятностей равна 0.\n","    \"\"\"\n","    total = sum(probs)\n","    if total == 0:\n","        raise ValueError(\"Сумма вероятностей не может быть равна 0.\")\n","    return [p / total for p in probs]\n","\n","def generate_card_distribution(chest_type, target_num_cards):\n","    \"\"\"\n","    Генерирует распределение карточек для сундука определенного типа.\n","\n","    Args:\n","        chest_type (int): Тип сундука (3, 5 или 7 карточек).\n","        target_num_cards (int): Общее количество уникальных карт в коллекции.\n","\n","    Returns:\n","        list: Список карточек для сундука.\n","\n","    Raises:\n","        ValueError: Если тип сундука не равен 3, 5 или 7.\n","    \"\"\"\n","    card_values = CARD_VALUES[target_num_cards]\n","    common_prob = card_values['О']\n","    uncommon_prob = card_values['Н']\n","    rare_prob = card_values['Р']\n","    legendary_prob = card_values['Л']\n","\n","    if chest_type == 3:\n","        common_prob, uncommon_prob, rare_prob = normalize_probabilities(common_prob, uncommon_prob, rare_prob)\n","        return np.random.choice(\n","            [\"О\", \"Н\", \"Р\"],\n","            size=chest_type,\n","            p=[common_prob, uncommon_prob, rare_prob]\n","        ).tolist()\n","\n","    elif chest_type == 5:\n","        common_prob, uncommon_prob, rare_prob = normalize_probabilities(common_prob, uncommon_prob, rare_prob)\n","        return np.random.choice(\n","            [\"О\", \"Н\", \"Р\"],\n","            size=chest_type,\n","            p=[common_prob, uncommon_prob, rare_prob]\n","        ).tolist()\n","\n","    elif chest_type == 7:\n","        common_prob, uncommon_prob, rare_prob, legendary_prob = normalize_probabilities(common_prob, uncommon_prob, rare_prob, legendary_prob)\n","        return np.random.choice(\n","            [\"О\", \"Н\", \"Р\", \"Л\"],\n","            size=chest_type,\n","            p=[common_prob, uncommon_prob, rare_prob, legendary_prob]\n","        ).tolist()\n","\n","    else:\n","        raise ValueError(f\"Неправильный тип сундука: {chest_type}\")\n","\n","def calculate_chests_per_session(num_players, chests_per_100_players):\n","    \"\"\"\n","    Рассчитывает количество сундуков, которые должны быть сгенерированы для одного занятия.\n","\n","    Args:\n","        num_players (int): Количество игроков.\n","        chests_per_100_players (float): Количество сундуков на 100 игроков.\n","\n","    Returns:\n","        int: Количество сундуков для одного занятия.\n","    \"\"\"\n","    return int((num_players / 100) * chests_per_100_players)\n","\n","def generate_session(num_chests):\n","    \"\"\"\n","    Генерирует распределение типов сундуков для одного занятия.\n","\n","    Args:\n","        num_chests (int): Общее количество сундуков в занятии.\n","\n","    Returns:\n","        list: Список типов сундуков (3, 5 или 7) для одного занятия.\n","    \"\"\"\n","    chest_types = [3, 5, 7]\n","    distribution = []\n","\n","    for _ in range(num_chests):\n","        chest_type = np.random.choice(chest_types)\n","        distribution.append(chest_type)\n","\n","    return distribution\n","\n","def calculate_needed_chests_and_sessions(num_players, target_probability, target_num_cards, iterations, fixed_sessions):\n","    \"\"\"\n","    Рассчитывает необходимое количество занятий и распределение сундуков для достижения целевой вероятности.\n","\n","    Args:\n","        num_players (int): Количество игроков.\n","        target_probability (float): Целевая вероятность достижения цели.\n","        target_num_cards (int): Целевое количество уникальных карт в коллекции.\n","        iterations (int): Количество итераций для оптимизации.\n","        fixed_sessions (int): Фиксированное количество занятий.\n","\n","    Returns:\n","        tuple: Содержит информацию о наилучшем числе занятий, распределении сундуков, распределении карточек, количестве сундуков и вероятности.\n","    \"\"\"\n","    min_sessions = max_sessions = fixed_sessions\n","\n","    best_probability = 0\n","    best_chest_distribution_per_task = None\n","    best_card_distribution_per_chest = None\n","    best_chest_count = None\n","    best_num_sessions = None\n","\n","    chests_per_player = 100\n","    chests_per_100_players = chests_per_player\n","\n","    for _ in range(iterations):\n","        for num_sessions in range(min_sessions, max_sessions + 1):\n","            chest_distributions = []\n","            card_distributions = []\n","            chest_count = Counter({3: 0, 5: 0, 7: 0})\n","\n","            for session_num in range(num_sessions):\n","                delta = 5 + session_num // 5\n","\n","                num_chests = np.random.randint(\n","                    low=max(1, calculate_chests_per_session(num_players, chests_per_100_players) - delta),\n","                    high=calculate_chests_per_session(num_players, chests_per_100_players) + delta\n","                )\n","                session_distribution = generate_session(num_chests)\n","                chest_distributions.append(session_distribution)\n","\n","                chest_count.update(session_distribution)\n","\n","                session_card_distribution = [generate_card_distribution(chest_type, target_num_cards) for chest_type in session_distribution]\n","                card_distributions.append(session_card_distribution)\n","\n","            total_card_counter = Counter()\n","            unique_card_counter = Counter()\n","\n","            for session in card_distributions:\n","                for chest in session:\n","                    total_card_counter.update(chest)\n","                    unique_card_counter.update(set(chest))\n","\n","            total_unique_cards_per_player = sum(unique_card_counter.values()) / num_players\n","            probability = total_unique_cards_per_player / target_num_cards\n","\n","            if 0.8 <= probability <= 1.0:\n","                if probability > best_probability:\n","                    best_probability = probability\n","                    best_chest_distribution_per_task = chest_distributions\n","                    best_card_distribution_per_chest = card_distributions\n","                    best_chest_count = chest_count\n","                    best_num_sessions = num_sessions\n","\n","        chests_per_100_players += 10\n","\n","    return best_num_sessions, best_chest_distribution_per_task, best_card_distribution_per_chest, best_chest_count, best_probability\n","\n","# Пример параметров\n","num_players = 10  # Количество игроков\n","target_num_cards = 40  # Целевое количество уникальных карточек\n","target_probability = 0.8  # Целевая вероятность сбора коллекции\n","iterations = 100  # Количество итераций оптимизации\n","\n","# Фиксированное количество занятий\n","fixed_sessions = 10\n","\n","# Вызов функции с учетом фиксированного количества занятий\n","best_num_sessions, best_chest_distribution_per_task, best_card_distribution_per_chest, best_chest_count, best_probability = calculate_needed_chests_and_sessions(\n","    num_players, target_probability, target_num_cards, iterations, fixed_sessions\n",")\n","\n","# Проверка и вывод основных результатов\n","if best_chest_distribution_per_task is not None:\n","    total_card_counter = Counter()\n","    unique_card_counter = Counter()\n","\n","    for session in best_chest_distribution_per_task:\n","        for chest_type in session:\n","            card_distribution = generate_card_distribution(chest_type, target_num_cards)\n","            total_card_counter.update(card_distribution)\n","            unique_card_counter.update(set(card_distribution))\n","\n","    print(\"\\nСтатистика по собранным уникальным карточкам (на одного игрока):\")\n","    pprint({card: count / num_players for card, count in unique_card_counter.items()})\n","\n","    print(\"\\nСтатистика по собранным карточкам (всего) (на одного игрока):\")\n","    pprint({card: count / num_players for card, count in total_card_counter.items()})\n","\n","    print(f\"\\nКоличество занятий: {best_num_sessions}\")\n","    print(\"\\nКоличество сундуков каждого типа полученных игроками за сезон:\")\n","    pprint(dict(best_chest_count))\n","\n","    adjusted_probability = min(best_probability, 1.0)\n","    print(f\"\\nВероятность собрать коллекцию из {target_num_cards} карточек: {adjusted_probability * 100:.2f}%\")\n","\n","    try:\n","        session_number = int(input(f\"\\nВведите номер занятия (от 1 до {best_num_sessions}), чтобы увидеть распределение карточек: \"))\n","        if 1 <= session_number <= best_num_sessions:\n","            print(f\"\\nВведите тип сундука (3, 5 или 7) для занятия {session_number}:\")\n","            chest_type = int(input())\n","            # Проверяем, есть ли сундуки с таким типом в занятии\n","            session_chests = best_chest_distribution_per_task[session_number - 1]\n","            filtered_chests = [chest for chest in session_chests if chest == chest_type]\n","\n","            if filtered_chests:\n","                # Выбираем случайный сундук из отфильтрованных\n","                chosen_chest = generate_card_distribution(chest_type, target_num_cards)\n","                print(f\"\\nСлучайный сундук с {chest_type} карточками для занятия {session_number}:\")\n","                print(chosen_chest)\n","            else:\n","                print(f\"\\nДля занятия {session_number} нет сундуков с {chest_type} карточками.\")\n","        else:\n","            print(f\"Номер занятия должен быть в диапазоне от 1 до {best_num_sessions}.\")\n","    except ValueError:\n","        print(\"Введите корректное число.\")\n","else:\n","    print(\"Не удалось найти наилучшее распределение карточек.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eBJ2mbNx8qDS","executionInfo":{"status":"ok","timestamp":1727797554176,"user_tz":-180,"elapsed":12588,"user":{"displayName":"ɅleV","userId":"18239638696989864234"}},"outputId":"c0b25d2f-bcac-4bea-b0da-945d3fa0b66e"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Статистика по собранным уникальным карточкам (на одного игрока):\n","{'Л': 1.1, 'Н': 11.9, 'О': 16.3, 'Р': 10.9}\n","\n","Статистика по собранным карточкам (всего) (на одного игрока):\n","{'Л': 1.1, 'Н': 21.5, 'О': 44.7, 'Р': 16.7}\n","\n","Количество занятий: 10\n","\n","Количество сундуков каждого типа полученных игроками за сезон:\n","{3: 57, 5: 54, 7: 57}\n","\n","Вероятность собрать коллекцию из 40 карточек: 99.00%\n","\n","Введите номер занятия (от 1 до 10), чтобы увидеть распределение карточек: 8\n","\n","Введите тип сундука (3, 5 или 7) для занятия 8:\n","7\n","\n","Случайный сундук с 7 карточками для занятия 8:\n","['Л', 'О', 'Р', 'О', 'О', 'Н', 'О']\n"]}]}]}